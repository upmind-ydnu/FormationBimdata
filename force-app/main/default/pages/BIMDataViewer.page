<apex:page controller="BIMDataViewerController">
  
  <apex:includeScript value="{!URLFOR($Resource.annotation_js)}"/>
  <apex:includeScript value="{!URLFOR($Resource.zone_helper_js)}"/>
  <apex:includeScript value="{!URLFOR($Resource.bimdataviewer_js)}"/>
  <apex:stylesheet value="{!URLFOR($Resource.bimdataviewer_css)}"/>
  <style>
    </style>  
    <script type="module">
      import makeBIMDataViewer from 'https://cdn.jsdelivr.net/npm/@bimdata/viewer@2.0.0-beta.90/dist/bimdata-viewer.esm.min.js';

      const cloudId = '{!cloudId}';
      const projectId = '{!projectId}';
      const modelId = '{!modelId}';
      const viewerToken = '{!viewerToken}'
      const zoneUUID = '{!zoneUUID}';
      const zoneId = '{!gicZone.Id}';


      const vfRemote =  { 
          manager: Visualforce.remoting.Manager, 
          action:  { 
            createAnnotation: '{!$RemoteAction.BIMDataViewerController.createAnnotation}',
            getAnnotations: '{!$RemoteAction.BIMDataViewerController.getAnnotations}',
          }
        };


      let viewerZones;
      let api;
      let model;
      let structureData;
      let modelStoreys;

      const bimdataViewer = makeBIMDataViewer({
        api: {
          cloudId: cloudId,
          projectId: projectId,
          modelIds: [modelId],
          accessToken: viewerToken,
        },
        ...bimdataViewerConfig
      });

      const annotations = annotationmgr(zoneId, vfRemote);
      bimdataViewer.registerPlugin(annotations.annotationPlugin);
      const viewerInstance = await bimdataViewer.mount("#viewer", customLayout);

      annotations.refreshAnnotations(viewerInstance.$viewer);


      const viewer2d = viewerInstance.$viewer.globalContext.plugins.get('viewer2d')[0];

      const handleZone = (_zoneUUID) => {
        const storeys = structureData.flatMap((node) => uuidGroupedByStorey(node));
        const zoneUUIDs = uuidsOfZone(viewerZones, _zoneUUID);
        const storeysWithUuidsCount = countUuidByStorey(storeys, zoneUUIDs);
        const selectStoreyUuid = storeysWithUuidsCount.sort((a, b) => b.uuidCountInStorey - a.uuidCountInStorey)[0].storeyUUID;
        const currentStorey = modelStoreys.filter((storey) => storey.uuid === selectStoreyUuid)[0];

        const getPointZones = (point) => {
          const spaces = viewerInstance.$viewer.state.getObjectsByUuids(zoneUUIDs);
          const shownSpaces = spaces.filter((space) => space.visible);
          const spacesPoints = shownSpaces.map((object) => {
            const id = object.id.toString();
            return viewer2d.viewer.scene.objectsMap.get(id).getShape().getPath().points;
          });
          return spacesPoints.some((points) => isPointInPolygon(point, points));
        };
        // standardPlugin.setGetPointZonesFunction(getPointZones);
        viewerInstance.$viewer.globalContext.localContexts.forEach((localContext) => {
          localContext.selectStorey(currentStorey);
        });
        viewer2d.fitView(zoneUUIDs);
        viewerInstance.$viewer.state.selectObjectsByUuids(zoneUUIDs);
      };

      const handleDeselect = () => {
        const { selectedObjectsIds } = viewerInstance.$viewer.state;
        viewerInstance.$viewer.state.deselectObjects(selectedObjectsIds);
      };
      
      viewerInstance.$viewer.globalContext.hub.on('2d-model-loaded', async (event) => {
        api = viewerInstance.$viewer.api.apiClient.modelApi;
        model = await api.getModel(cloudId, event.model.id, projectId);
        viewerZones = await api.getZones(cloudId, event.model.id, projectId);
        modelStoreys = event.model.storeys;
        async function fetchData(url) {
          let data;
          try {
            const response = await fetch(url); // Replace with your API endpoint
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            data = await response.json(); // Parse the response as JSON
          } catch (error) {
            console.error('Error:', error);
          }
          return data;
        }
        structureData = await fetchData(model.structure_file);
        if (zoneUUID) {
          handleZone(zoneUUID);
        }
      });

    </script>
    <div style="height: 100vh;">
      <div id="viewer"></div>
    </div>

</apex:page>